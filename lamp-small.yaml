heat_template_version: 2015-10-15

description: |
 #### Production
 This stack is intended for low to medium traffic production
 websites and can be scaled as needed to accommodate future
 growth.  This stack includes a Cloud Load Balancer, Cloud
 Database, and a Master server (plus optional secondary
 servers).  It also includes Cloud Monitoring and Cloud
 Backups.

 This stack is running the latest version of
 [Apache](https://www.apache.org//),
 and [PHP](http://www.php.net/).
 with a Cloud Database running
 [MySQL 5.6](http://www.mysql.com/about/).
parameter_groups:
- label: LAMP Settings
  parameters:
  - lamp_url
  - db_user
  - db_name
  - php_myadmin
- label: rax-dev-params
  parameters:
  - server_image
  - secondary_template
  - ansible_source
parameters:
  #LAMP Customization
  lamp_url:
    type: string
    default: example.com
    label: Site Domain
    description: Domain used to configure Apache
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$"
      description: Must be a valid domain name
    immutable: true
  db_user:
    type: string
    default: example
    label: Database User
    description: Username to configure for SQL
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}$"
      description: Must only contain alphanumeric characters, '-', and '.'
    immutable: true
  db_name:
    type: string
    default: example
    label: Database Name
    description: Database to configure in SQL
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}$"
      description: Must only contain alphanumeric characters, '-', and '.'
    immutable: true
  php_myadmin:
    type: boolean
    default: false
    label: PHPMyAdmin
    description: Enable or disable PHPMyAdmin
    immutable: true
  backup_email:
    type: string
    default: admin@example.com
    label: E-mail
    description: E-mail address to be notified for failing backups
    immutable: true
  #Advanced Options
  lsync_directory:
    type: string
    default: "/var/www"
    label: Shared Directory
    description: This directory will be synchronized between all servers within this stack.  Leave blank to manually configure Lsyncd
  server_flavor:
    type: string
    default: 4 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to be used for all servers in this stack
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
    immutable: true
  database_disk:
    type: number
    default: 5
    constraints:
    - range:
        min: 5
        max: 500
    label: Database Disk (in GB)
    description: Size of the Cloud Database volume in GB
    immutable: true
  database_flavor:
    type: string
    default: 1GB Instance
    label: Cloud Database Flavor
    description: Flavor for the Cloud Database
    constraints:
    - allowed_values:
      - 1GB Instance
      - 2GB Instance
      - 4GB Instance
      - 8GB Instance
      - 16GB Instance
      - 32GB Instance
      - 64GB Instance
  server_image:
    type: string
    default: f4bbbce2-50b0-4b07-bf09-96c175a45f4b
    label: Server Image
    description: Image to be used for all servers in this stack
    constraints:
    - allowed_values:
      - f4bbbce2-50b0-4b07-bf09-96c175a45f4b
    immutable: true
  server_count:
    type: number
    default: 0
    label: Number of Secondary Servers
    description: Number of secondary web nodes
    constraints:
      - range: { min: 0, max: 10 }
  db_type:
    type: string
    default: clouddb
    label: Database Type
    description: Whether to use a Cloud Database or a self-hosted MySQL instance
    constraints:
    - allowed_values:
      - clouddb
      - server
  db_server_flavor:
    type: string
    default: 4 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to be used for all servers in this stack
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
    immutable: true
  secondary_template:
    type: string
    default: http://catalog.rs-heat.com/lamp-small/lamp-small-secondary.yaml
    label: Secondary Template
    description: Template to use for secondary servers
    immutable: true
  secondary_template:
    type: string
    default: http://catalog.rs-heat.com/wordpress-small/wordpress-small-secondary.yaml
    label: Secondary Template
    description: Template to use for secondary servers
    immutable: true
  ansible_source:
    type: string
    default: http://catalog.rs-heat.com/ansible-roles/ansible-roles.tar.gz
    label: Ansible Tarball
    description: The Ansible Roles will be pulled from the location provided
    immutable: true
resources:
  #SSH Key
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true
  #Database
  database:
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
        type:
          str_replace:
            template: https://raw.githubusercontent.com/chrishultin/heat-seed-lamp/master/seed-dbtype.yaml
            params:
              dbtype: { get_param: db_type }
        properties:
          stack_name: { get_param: "OS::stack_name" }
          db_name: { get_param: db_name }
          db_user: { get_param: db_user }
          clouddb_flavor: { get_param: clouddb_flavor }
          clouddb_disk: { get_param: clouddb_disk }
          server_image: { get_param: server_image }
          server_flavor: { get_param: db_server_flavor }
          ssh_key: { get_param: ssh_key }
          ansible_source: { get_param: ansible_source }
  #Software Configurations
  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            mkdir -p /etc/ansible/roles
            wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
            tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
          params:
            ansible_source: { get_param: ansible_source }

  lamp_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: |
        ---
        - name: Install and configure LAMP
          hosts: localhost
          connection: local
          roles:
          - common
          - apache
          - php
          - holland
          - phpmyadmin
  other_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - default: "[]"
        name: lsync_dirs
        type: CommaDelimitedList
      - default: "[]"
        name: lsync_servers
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_nodes
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_node_rules
        type: CommaDelimitedList
      config: |
        ---
        - name: Install and configure other things
          hosts: localhost
          connection: local
          roles:
          - firewall
          - lsync
  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_role_config
      server:
        get_resource: lamp_server
  deploy_lamp:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        apache_default_domain: { get_param: lamp_url }
        tz: "America/Chicago"
        holland_mysql_user: "holland"
        holland_mysql_password: {  get_attr: [database, holland_pass] }
        holland_mysql_host: { get_attr: [database, mysql_host] }
        holland_create_user: "no"
        phpmyadmin_install: { get_param: php_myadmin }
        phpmyadmin_host: { get_attr: [lamp_database, hostname] }
        phpmyadmin_user: { get_param: db_user }
        phpmyadmin_pass: { get_attr: [database, mysql_pass] }
      config:
        get_resource: lamp_config
      server:
        get_resource: lamp_server
  other_lamp:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        lsync_dirs: [ { get_param: lsync_directory } ]
        lsync_private_key: { get_attr: [ssh_key, private_key] }
        lsync_servers: { get_attr: [lamp_secondary, private_ip] }
        firewall_global_rules: [ "0.0.0.0,0,22,tcp", "0.0.0.0,0,80,tcp", "0.0.0.0,0,443,tcp"]
        firewall_nodes: { get_attr: [lamp_secondary, private_ip] }
        firewall_node_rules: []
      config:
        get_resource: other_config
      server:
        get_resource: lamp_server
  #Master Server
  lamp_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: "OS::stack_name" }
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "backup_agent_only,monitoring_defaults"
  #Monitoring Checks
  lamp_server_http_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: deploy_lamp
    properties:
      entity: { get_resource: lamp_server }
      type: remote.http
      label:
        str_replace:
          template: stack Master HTTP Check
          params:
            stack: { get_param: "OS::stack_name" }
      details:
        url:
          str_replace:
            template: "http://ipaddr"
            params:
              ipaddr: { get_attr: [lamp_server, accessIPv4] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      - Dallas Fort Worth (DFW)
      - London (LON)
      target_hostname: { get_attr: [lamp_server, accessIPv4] }
      target_receiver: IPv4
  load_balancer_http_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: load_balancer
    properties:
      entity: { get_resource: lamp_server }
      type: remote.http
      label:
        str_replace:
          template: stack Load Balancer HTTP Check
          params:
            stack: { get_param: "OS::stack_name" }
      details:
        url:
          str_replace:
            template: "http://ipaddr"
            params:
              ipaddr: { get_attr: [load_balancer, PublicIp] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      - Dallas Fort Worth (DFW)
      - London (LON)
      target_hostname: { get_attr: [load_balancer, PublicIp] }
      target_receiver: IPv4
  #Cloud Backup
  lamp_backup:
    type: Rackspace::Cloud::BackupConfig
    depends_on: lamp_server
    properties:
      #host_ip_address: { get_attr: [lamp_server, accessIPv4] }
      server: { get_resource: lamp_server }
      BackupConfigurationName:
        str_replace:
          template: stack Weekly Backup
          params:
            stack: { get_param: "OS::stack_name" }
      Inclusions:
      - FilePath: "/var/spool/holland"
        FileItemType: "Folder"
      - FilePath: "/var/www"
        FileItemType: "Folder"
      NotifyFailure: true
      NotifyRecipients: { get_param: backup_email }
      TimeZoneId: Central Standard Time
      StartTimeAmPm: AM
      StartTimeHour: 1
      StartTimeMinute: 0
      HourInterval: null
      DayOfWeekId: 0
      Frequency: "Weekly"
      VersionRetention: 30
  #Secondary Server
  lamp_secondary:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: server_count }
      resource_def:
        type: { get_param: secondary_template }
        properties:
          ssh_key: { get_resource: ssh_key }
          parent_stack_id: { get_param: "OS::stack_id" }
          server_image: { get_param: server_image }
          server_flavor: { get_param: server_flavor }
          apache_default_domain: { get_param: lamp_url }
          server_name:
            str_replace:
              template: stack-secondary-%index%
              params:
                stack: { get_param: "OS::stack_name" }
          master_server: { get_attr: [lamp_server, networks, private, 0] }
          php_myadmin: { get_param: php_myadmin }
          ansible_source: { get_param: ansible_source}
  #Cloud Load Balancer
  load_balancer:
    type: Rackspace::Cloud::LoadBalancer
    depends_on:
    - deploy_lamp
    - lamp_secondary
    properties:
      name:
        str_replace:
          template: stack_Load_Balancer
          params:
            stack: { get_param: "OS::stack_name" }
      nodes:
      - addresses: [ { get_attr: [lamp_server, networks, private, 0] } ]
        port: 80
        condition: ENABLED
      - addresses: { get_attr: [lamp_secondary, private_ip] }
        port: 80
        condition: ENABLED
      port: 80
      protocol: HTTP
      algorithm: ROUND_ROBIN
      contentCaching: ENABLED
      sessionPersistence: HTTP_COOKIE
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4
      metadata:
        rax-heat: { get_param: "OS::stack_id" }

outputs:
  lamp_public_ip:
    description: Load Balancer IP
    value:
      get_attr: [load_balancer, PublicIp]
  lamp_public_url:
    description: Public URL
    value:
      str_replace:
        template: "http://domain/"
        params:
          domain: { get_param: lamp_url }
  lampmyadmin_url:
    description: PHPMyAdmin URL (if enabled)
    value:
      str_replace:
        template: "https://IP/phpmyadmin/"
        params:
          IP:
            get_attr: [lamp_server, accessIPv4]
  mysql_user:
    description: Database User
    value: { get_param: db_user }
  mysql_database:
    description: Database Name
    value: {get_param: db_name }
  mysql_password:
    description: Database Password
    value:
      get_attr: [database, mysql_password]
  mysql_host:
    description: Database Host
    value:
      get_attr: [database, mysql_host]
  root_pass:
    description: MySQL Root Password (if configured)
    value: { get_attr: [database, root_pass] }
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr: [ssh_key, private_key]
  server_ip:
    description: Server Public IP
    value:
      get_attr: [lamp_server, accessIPv4]
  secondary_ips:
    description: Secondary Node IPs
    value:
      get_attr: [lamp_secondary, public_ip]
